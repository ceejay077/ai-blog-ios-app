import * as Clipboard from "expo-clipboard";
import * as FileSystem from "expo-file-system";
import * as Print from "expo-print";
import { router, useLocalSearchParams } from "expo-router";
import * as Sharing from "expo-sharing";
import React from "react";
import {
  Alert,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";

export default function ArticleResultScreen() {
  const params = useLocalSearchParams();
  const content = params.content as string;
  const title = params.title as string;
  const wordCount = parseInt(params.wordCount as string, 10);

  const handleCopyText = async () => {
    await Clipboard.setStringAsync(content);
    Alert.alert("Success", "Article copied to clipboard!");
  };

  const handleDownloadPDF = async () => {
    try {
      const html = `
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
                padding: 40px;
                line-height: 1.6;
                color: #333;
              }
              h1 {
                color: #000;
                margin-bottom: 20px;
                border-bottom: 2px solid #007AFF;
                padding-bottom: 10px;
              }
              .meta {
                color: #666;
                font-size: 14px;
                margin-bottom: 30px;
              }
              .content {
                white-space: pre-wrap;
                word-wrap: break-word;
              }
              .footer {
                margin-top: 50px;
                padding-top: 20px;
                border-top: 1px solid #ddd;
                color: #999;
                font-size: 12px;
                text-align: center;
              }
            </style>
          </head>
          <body>
            <h1>${title}</h1>
            <div class="meta">Word Count: ${wordCount} words</div>
            <div class="content">${content.replace(/\n/g, "<br>")}</div>
            <div class="footer">
              Generated by SEO Article Generator<br>
              Powered by Anthropic Claude AI
            </div>
          </body>
        </html>
      `;

      const { uri } = await Print.printToFileAsync({ html });

      const isAvailable = await Sharing.isAvailableAsync();
      if (isAvailable) {
        await Sharing.shareAsync(uri, {
          mimeType: "application/pdf",
          dialogTitle: "Save Article as PDF",
          UTI: "com.adobe.pdf",
        });
        Alert.alert("Success", "PDF generated and ready to save!");
      } else {
        Alert.alert("Error", "Sharing is not available on this device");
      }
    } catch (error) {
      console.error("PDF generation error:", error);
      Alert.alert("Error", "Failed to generate PDF");
    }
  };

  const handleSaveHTML = async () => {
    try {
      const html = `
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
                padding: 40px;
                line-height: 1.6;
                color: #333;
              }
              h1 {
                color: #000;
                margin-bottom: 20px;
                border-bottom: 2px solid #007AFF;
                padding-bottom: 10px;
              }
              .meta {
                color: #666;
                font-size: 14px;
                margin-bottom: 30px;
              }
              .content {
                white-space: pre-wrap;
                word-wrap: break-word;
              }
              .footer {
                margin-top: 50px;
                padding-top: 20px;
                border-top: 1px solid #ddd;
                color: #999;
                font-size: 12px;
                text-align: center;
              }
            </style>
          </head>
          <body>
            <h1>${title}</h1>
            <div class="meta">Word Count: ${wordCount} words</div>
            <div class="content">${content.replace(/\n/g, "<br>")}</div>
            <div class="footer">
              Generated by SEO Article Generator<br>
              Powered by Anthropic Claude AI
            </div>
          </body>
        </html>
      `;

      const fileUri =
        FileSystem.documentDirectory + `${title.replace(/ /g, "_")}.html`;
      await FileSystem.writeAsStringAsync(fileUri, html, {
        encoding: FileSystem.EncodingType.UTF8,
      });

      const isAvailable = await Sharing.isAvailableAsync();
      if (isAvailable) {
        await Sharing.shareAsync(fileUri, {
          mimeType: "text/html",
          dialogTitle: "Save Article as HTML",
          UTI: "public.html",
        });
        Alert.alert("Success", "HTML file saved and ready to share!");
      } else {
        Alert.alert("Success", `HTML file saved to ${fileUri}`);
      }
    } catch (error) {
      console.error("HTML generation error:", error);
      Alert.alert("Error", "Failed to save HTML file");
    }
  };

  const handleRegenerate = () => {
    router.back();
  };

  const shareButtons = [
    { name: "Twitter", icon: "üê¶", color: "#1DA1F2" },
    { name: "Facebook", icon: "üìò", color: "#4267B2" },
    { name: "LinkedIn", icon: "üíº", color: "#0077B5" },
    { name: "WhatsApp", icon: "üí¨", color: "#25D366" },
  ];

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Article Generated!</Text>
        <Text style={styles.wordCount}>{wordCount} words</Text>
      </View>

      <ScrollView
        style={styles.contentContainer}
        contentContainerStyle={styles.contentPadding}
      >
        <Text style={styles.title}>{title}</Text>
        <Text style={styles.content}>{content}</Text>
      </ScrollView>

      <View style={styles.actions}>
        <View style={styles.actionRow}>
          <TouchableOpacity
            style={styles.actionButton}
            onPress={handleRegenerate}
          >
            <Text style={styles.actionIcon}>üîÑ</Text>
            <Text style={styles.actionText}>Regenerate</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.actionButton}
            onPress={handleDownloadPDF}
          >
            <Text style={styles.actionIcon}>üìÑ</Text>
            <Text style={styles.actionText}>Download PDF</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.actionButton}
            onPress={handleSaveHTML}
          >
            <Text style={styles.actionIcon}>üåê</Text>
            <Text style={styles.actionText}>Save as HTML</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.actionButton}
            onPress={handleCopyText}
          >
            <Text style={styles.actionIcon}>üìã</Text>
            <Text style={styles.actionText}>Copy Text</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.shareSection}>
          <Text style={styles.shareTitle}>Share to Social Media</Text>
          <View style={styles.shareButtons}>
            {shareButtons.map((button) => (
              <TouchableOpacity
                key={button.name}
                style={[styles.shareButton, { backgroundColor: button.color }]}
                onPress={() =>
                  Alert.alert(
                    "Coming Soon",
                    `${button.name} sharing will be available in a future update`
                  )
                }
              >
                <Text style={styles.shareIcon}>{button.icon}</Text>
                <Text style={styles.shareButtonText}>{button.name}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>

        <TouchableOpacity
          style={styles.doneButton}
          onPress={() => router.push("/(app)/create-article")}
        >
          <Text style={styles.doneButtonText}>Create New Article</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFFFFF",
  },
  header: {
    paddingTop: 50,
    paddingHorizontal: 20,
    paddingBottom: 15,
    backgroundColor: "#F8F9FA",
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#000000",
    marginBottom: 5,
  },
  wordCount: {
    fontSize: 14,
    color: "#666666",
  },
  contentContainer: {
    flex: 1,
  },
  contentPadding: {
    padding: 20,
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    color: "#000000",
    marginBottom: 20,
    lineHeight: 30,
  },
  content: {
    fontSize: 16,
    color: "#333333",
    lineHeight: 26,
  },
  actions: {
    padding: 20,
    borderTopWidth: 1,
    borderTopColor: "#E0E0E0",
    backgroundColor: "#F8F9FA",
  },
  actionRow: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginBottom: 20,
  },
  actionButton: {
    alignItems: "center",
    flex: 1,
  },
  actionIcon: {
    fontSize: 32,
    marginBottom: 5,
  },
  actionText: {
    fontSize: 12,
    color: "#333333",
    fontWeight: "500",
  },
  shareSection: {
    marginBottom: 20,
  },
  shareTitle: {
    fontSize: 14,
    fontWeight: "600",
    color: "#666666",
    marginBottom: 12,
    textAlign: "center",
  },
  shareButtons: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    gap: 10,
  },
  shareButton: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 8,
    minWidth: 120,
  },
  shareIcon: {
    fontSize: 18,
    marginRight: 8,
  },
  shareButtonText: {
    color: "#FFFFFF",
    fontSize: 14,
    fontWeight: "600",
  },
  doneButton: {
    backgroundColor: "#007AFF",
    borderRadius: 10,
    paddingVertical: 16,
    alignItems: "center",
  },
  doneButtonText: {
    color: "#FFFFFF",
    fontSize: 16,
    fontWeight: "600",
  },
});
